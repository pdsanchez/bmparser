<?php

/**
 * The MIT License (MIT)
 * 
 * Copyright (c) 2015 Pablo D. Sánchez
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

require_once "Folder.class.php";
require_once "Bookmark.class.php";

/**
 * Parser of the bookmarks html files generated by firefox and chrome.
 * 
 * @package    bmparser
 * @author     Pablo D. Sánchez <pdsanchez.contacto@gmail.com>
 */
class BookmarkHtmlFileParser {
	private $filename;
	private $dom;
	
	/**
	 * Construct
	 * 
	 * @param string $filename The bookmarks html file path
	 */
	function __construct($filename) {
		$this->filename = $filename;
		$this->dom = new DomDocument();
		@$this->dom->loadHTMLFile($filename);
	}
	
	/**
   * Parses the html file and extracts the bookmarks
	 * 
	 * @return array    The list of Bookmarks objects
	 */
	public function getAllBookmarks() {
		$list = array();
		
		$nodeList = $this->dom->getElementsByTagName('a');
		foreach($nodeList as $item) {
			$name = $item->nodeValue;
			
			$atts = $item->attributes;
			$url = $atts->getNamedItem("href")->nodeValue;
			if (substr($url, 0, 6) === "place:") { continue; }
			
			$icon = ( $atts->getNamedItem("icon") === null) ? "" : $atts->getNamedItem("icon")->nodeValue;
			$tagList = ( $atts->getNamedItem("tags") === null) ? array() : explode(",", $atts->getNamedItem("tags")->nodeValue);
			
			$description = "";
			
			$dlSibling = $item->nextSibling;
			if ($dlSibling && $dlSibling->nodeName == 'dd') {
				$description = trim($dlSibling->nodeValue);
			}
			
			$bookmark = new Bookmark($name, $url, $description, $icon);
			foreach ($tagList as $tag) {
				$bookmark->addTag(trim($tag));
			}
			
			array_push($list, $bookmark);
		}
		
		return $list;
	}
	
	/**
	 * Parses the html file and extracts the folders with the bookmarks
	 * 
	 * @return array    The list of Folder objects with the Bookmarks objects
	 */
	public function getBookmarksTree() {
		$folderList = array();
		
		$node = $this->dom->getElementsByTagName('dl')->item(0);
		
		$childList = $node->childNodes;
		foreach($childList as $nChild) {
			if ($nChild->nodeName == 'dt') {
				$folder = $this->parseHtml($nChild);
				
				if ($folder) {
					array_push($folderList, $folder);
				}
				
				//echo "<p>";
				//echo "<PRE>";
				//print_r($folder);
				//echo "</PRE>";
				//echo "<p>===============================</p>";
			}
		}
		
		return $folderList;
	}

	/**
	 * Extracts folder data and starts to process bookmarks.
	 * 
	 * @param DOMNode $node The node to parser (<dt>)
	 * 
	 * @return Folder    The folder created
	 */
	private function parseHtml($node) {
		// Folder: <DT><H3 ...>folder_name</H3>
		if ($node->nodeName == 'dt' && $node->firstChild->nodeName == 'h3') {
			// Create Folder
			$folder = new Folder(trim($node->nodeValue));
			
			// Next sibling could be DL or DD (contains DL)
			// DD - folder description
			// DL - folder content (bookmarks)
			$sibling = $node->nextSibling;
			if ($sibling->nodeName == 'dd') {
				$description = trim($sibling->childNodes->item(0)->nodeValue);
				$dl = $sibling->childNodes->item(1);
				
				$folder->setDescription($description);
				$this->processContent($dl, $folder);
			}
			else if ($sibling->nodeName == 'dl') {
				$this->processContent($sibling, $folder);
			}
			
			return $folder;
		}
	}

	/**
	 * Extracts bookmark data and starts to process subfolders.
	 * 
	 * @param DOMNode $node   The node to parser (<dl>)
	 * @param Folder $folder The parent folder
	 */
	private function processContent($node, $folder) {
		$dlChildList = $node->childNodes;
		foreach($dlChildList as $dlChild) {
			if ($dlChild->nodeName == 'dt' && $dlChild->firstChild->nodeName == 'a') {
				// Create Bookmark
				$atts = $dlChild->firstChild->attributes;
				
				$url = $atts->getNamedItem("href")->nodeValue;
				if (substr($url, 0, 6) === "place:") { continue; }
						
				$icon = ( $atts->getNamedItem("icon") === null) ? "" : $atts->getNamedItem("icon")->nodeValue;
				$tagList = ( $atts->getNamedItem("tags") === null) ? array() : explode(",", $atts->getNamedItem("tags")->nodeValue);
				
				$description = "";
				
				$dlSibling = $dlChild->nextSibling;
				if ($dlSibling && $dlSibling->nodeName == 'dd') {
					$description = trim($dlSibling->nodeValue);
				}
				
				$bookmark = new Bookmark($dlChild->firstChild->nodeValue, $url, $description, $icon);
				foreach ($tagList as $tag) {
					$bookmark->addTag(trim($tag));
				}
				
				// Add bookmark to folder
				$folder->addBookmark($bookmark);
			}
			else if ($dlChild->nodeName == 'dt' && $dlChild->firstChild->nodeName == 'h3') {
				$subfolder = $this->parseHtml($dlChild);
				$folder->addFolder($subfolder);
			}
		}
	}
}
?>